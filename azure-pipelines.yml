# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
trigger:
  branches:
    include:
    - master
    - 2.x
  paths:
    exclude:
    - README.md
    - project-docs/*
    - roadmaps/*
pr:
- master
- 2.x

variables:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  PackageVersion: $[format('3.0.0-{0}', variables['Build.BuildId'])]
strategy:
  matrix:
    Linux_Build_and_Test:
      imageName: ubuntu-latest
      skipFilter: '--filter "Category!=Integration&Category!=SkipOnLinux"'
    MacOS_Build_and_Test:
      imageName: windows-latest
      skipFilter: '--filter "Category!=Integration"'
    Windows_Build_Test_and_Package:
      imageName: macOS-latest
      skipFilter: '--filter "Category!=Integration&Category!=SkipOnMacOS"'
pool:
  vmImage: $(imageName)

steps:
- pwsh: |
    if ($env:PackageVersionOverride) {
        $env:PackageVersion = $env:PackageVersionOverride
    }
    Write-Host "##vso[build.updatebuildnumber]$env:PackageVersion"
    Write-Host "##vso[task.setvariable variable=PackageVersion;]$env:PackageVersion"
    $prefix = $env:PackageVersion.Split('-')[0]
    $suffix = $env:PackageVersion.Split('-')[1]
    Write-Host "##vso[task.setvariable variable=VersionPrefix;]$prefix"
    Write-Host "##vso[task.setvariable variable=VersionSuffix;]$suffix"
  displayName: Set Build Variables
  env:
    PackageVersion: $(PackageVersion)
    PackageVersionOverride: $(PackageVersionOverride)
- task: DotNetCoreCLI@2
  displayName: dotnet restore
  inputs:
    command: restore
    projects: src/Steeltoe.All.sln
    feedsToUse: config
    nugetConfigPath: nuget.config
- task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: Prepare analysis on SonarCloud
  inputs:
    SonarCloud: SonarCloud
    organization: steeltoeoss
    projectKey: SteeltoeOSS_steeltoe
    extraProperties: |
      sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml
      sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx
- task: DotNetCoreCLI@2
  displayName: dotnet build
  inputs:
    command: build
    projects: src/Steeltoe.All.sln
    arguments: '--no-restore -c $(buildConfiguration) -v n /p:TreatWarningsAsErrors=True /p:VersionPrefix=$(VersionPrefix) /p:VersionSuffix=$(VersionSuffix)'
- task: DotNetCoreCLI@2
  displayName: dotnet test
  inputs:
    command: test
    projects: src/Steeltoe.All.sln
    arguments: '-c $(buildConfiguration) -maxcpucount:1 /p:CopyLocalLockFileAssemblies=true $(skipFilter) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Include="[Steeltoe.*]*" /p:Exclude="[*.Test]*" /p:UseSourceLink=true'
    publishTestResults: true
    nobuild: true
- pwsh: dotnet tool install -g dotnet-reportgenerator-globaltool; reportgenerator "-reports:**\coverage.opencover.xml" "-targetdir:$(Build.SourcesDirectory)\CodeCoverage" -reporttypes:Cobertura
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: Create Single Code Coverage Summary Report
- task: PublishCodeCoverageResults@1
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)\CodeCoverage\Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)\CodeCoverage'
- pwsh: choco install codecov --no-progress; codecov -f "$(Build.SourcesDirectory)\CodeCoverage\Cobertura.xml" -t $env:CodeCovToken
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: Install and Run CodeCov
  env:
    CodeCovToken: $(CodeCovToken)
- task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: Run Code Analysis
- task: SonarSource.sonarcloud.38b27399-a642-40af-bb7d-9971f69712e8.SonarCloudPublish@1
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: Publish Quality Gate Result
- task: DotNetCoreCLI@2
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: dotnet pack
  inputs:
    command: pack
    feedsToUse: select
    arguments: '-c $(buildConfiguration) -v n /p:TreatWarningsAsErrors=True /p:VersionPrefix=$(VersionPrefix) /p:VersionSuffix=$(VersionSuffix)'
    packagesToPack: src/Steeltoe.All.sln
    versioningScheme: byEnvVar
    versionEnvVar: PackageVersion
    nobuild: true
- task: PowerShell@2
  condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['SignClientSecret'], '')), not(eq(variables['SignClientUser'], '')), eq( variables['Agent.OS'], 'Windows_NT' ))
  displayName: Authenticode Sign Packages
  inputs:
    filePath: build/sign-packages.ps1
  env:
    SignClientUser: $(SignClientUser)
    SignClientSecret: $(SignClientSecret)
    ArtifactDirectory: $(Build.ArtifactStagingDirectory)
- task: PublishBuildArtifacts@1
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)
    ArtifactName: Packages
    publishLocation: Container
